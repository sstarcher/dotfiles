alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'
#https://developer.atlassian.com/blog/2016/02/best-way-to-store-dotfiles-git-bare-repo/
alias sed=gsed
git_org() {
    ORG=$1
    PAGE=${2:-1}
    set -x
    curl -u ${GITHUB_TOKEN}:x-oauth-basic -s https://api.github.com/orgs/${ORG}/repos\?per_page\=100\&page\=${PAGE} | ruby -rubygems -e 'require "json"; JSON.load(STDIN.read).each { |repo| %x[git clone --depth=1 #{repo["ssh_url"]} ]}'
}

diff_oncology(){
   grep -v 'chart' | grep -v 'checksum' | grep -E -3 '(\-|\+)\s\s.*'
}

tf(){
    terraform "$@" | landscape
}

ssh-bastion() {
    ssh -o ProxyCommand='ssh -W %h:%p bastion' $@
}

virtenv(){
  ENV=${1:-"default_env"}
  source /usr/local/bin/virtualenvwrapper.sh
  workon ${ENV}
}

ecr(){
    eval "$(aws ecr get-login --no-include-email)"
}

patch(){
    git checkout master
    git pull
    TAG=$(helm-release . --print-computed-version --bump patch)
    git tag -a -m 'tagging release' $TAG
    git push origin $TAG
}

minor(){
    git checkout master
    git pull
    TAG=$(helm-release . --print-computed-version --bump minor)
    git tag -a -m 'tagging release' $TAG
    git push origin $TAG
}

tag(){
    if [ "$#" -ne 2 ]; then
        echo "Expected 2 parameters, but got $#"
        echo "tag TAG MESSAGE"
        return 1
    fi

    TAG=$1
    MESSAGE=$2

    if [ -z "$GREN_GITHUB_TOKEN" ]; then
        echo 'GREN_GITHUB_TOKEN must be set'
        return 1
    fi

    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [ "$BRANCH" != "master" ]; then
        echo 'switching to master'
        git checkout master
    fi

    git pull
    git tag -a "$TAG" -m "$MESSAGE"
    git push origin "$TAG"

    gren release -D commits
}

function brew() {
    local dump=false;
    if [[ $# -gt 0 ]]; then
        case "$1" in
            *install|*tap)
                dump=true;
                ;;
            cask)
                if [[ $# -gt 2 ]]; then
                    case "$2" in
                        *install)
                            dump=true;
                            ;;
                    esac
                fi
                ;;
        esac
    fi
    command brew "$@"

    if $dump; then
        echo "Updating Brewfile"
        command brew bundle dump --force --file="$HOME/Brewfile"
    fi
}

tf-upgrade() {
    (
        set -e
        git checkout master
        git pull
        git fetch --tags -f
        rm -rf .terraform
        terraform init
        terraform 0.12upgrade -yes || true
        rm versions.tf || true
        rm -rf .terraform  || true

        if [[ -d "test"  ]]; then
            pushd test
            rm -rf .terraform
            sed -i 's#"\.\."#".\/\.\."#g' ./*.tf
            terraform init
            terraform 0.12upgrade -yes || true
            rm versions.tf || true
            terraform plan  -var name=bob || terraform plan
            rm -rf .terraform || true
            popd
        fi

        if grep -R 'TODO' .; then
            return 1
        fi
        git commit -m 'upgrading to terraform 0.12' .
        git push
        TAG=$(helm-release . --print-computed-version --bump minor)
        tag $TAG 'upgrade terraform'
        echo $TAG
    )
}

helm-package() {
  helm-release "$@"
  helm3 package helm/
  mv *.tgz ~/github/helm-charts/docs/
  helm3 repo index ~/github/helm-charts/docs/
  (
    cd ~/github/helm-charts/docs/
    git add *.tgz index.yaml
    git commit -m 'adding chart'
    git push
  )
}

alias prometheus="kubectl port-forward -n ops svc/prometheus-server 8080:80"
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
export PATH=$HOME/.gloo/bin:$PATH
export TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"


alias k="kubectl $@"

alias kc='kubectl'

alias kgp='kubectl get pods'

alias kgs='kubectl get svc'

alias kgc='kubectl get componentstatuses'

alias kctx='kubectl config current-context'

alias kcon='kubectl config use-context'

alias kgc='kubectl config get-context'

alias kne="kubectl describe nodes | egrep 'Events|Name:' | grep -v 'none'"

alias gf='git commit --fixup HEAD .'
